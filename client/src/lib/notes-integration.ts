import type { MailItem } from "@shared/schema";

interface NoteData {
  title: string;
  content: string;
  tags?: string[];
  url?: string;
}

export function createNoteContent(item: MailItem): NoteData {
  const content = `📄 ${item.title}

📝 Summary:
${item.summary}

📊 Details:
• Category: ${item.category.charAt(0).toUpperCase() + item.category.slice(1)}
• Upload Date: ${new Date(item.uploadDate).toLocaleDateString()}
${item.reminderDate ? `• Reminder: ${new Date(item.reminderDate).toLocaleDateString()}` : ''}

${item.extractedText ? `📋 Extracted Text:
${item.extractedText}` : ''}

---
Generated by Posty Mail Manager`;

  return {
    title: item.title,
    content,
    tags: [item.category, 'mail', 'document'],
    url: item.imageUrl
  };
}

// Apple Notes integration via URL scheme
export function openInAppleNotes(noteData: NoteData): void {
  const encodedTitle = encodeURIComponent(noteData.title);
  const encodedContent = encodeURIComponent(noteData.content);
  
  // Apple Notes URL scheme for creating new note
  const appleNotesUrl = `notes://new?title=${encodedTitle}&content=${encodedContent}`;
  
  // Fallback to web version if on non-Apple device
  const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;
  const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
  
  if (isMac || isIOS) {
    window.location.href = appleNotesUrl;
  } else {
    // Download as text file for manual import
    downloadAsTextFile(noteData, 'apple-note.txt');
  }
}

// Google Keep integration via web URL
export function openInGoogleKeep(noteData: NoteData): void {
  const baseUrl = 'https://keep.google.com/u/0/#NOTE/';
  
  // Google Keep doesn't have a direct URL scheme for creating notes
  // We'll open Google Keep and provide instructions
  const instructionNote = `📋 Import this note to Google Keep:

Title: ${noteData.title}

Content:
${noteData.content}

Instructions:
1. Copy the content above
2. Create a new note in Google Keep
3. Paste the content
4. Add tags: ${noteData.tags?.join(', ')}`;
  
  // Copy to clipboard and open Google Keep
  navigator.clipboard.writeText(noteData.content).then(() => {
    window.open('https://keep.google.com/', '_blank');
  }).catch(() => {
    // Fallback if clipboard API fails
    downloadAsTextFile(noteData, 'google-keep-note.txt');
    window.open('https://keep.google.com/', '_blank');
  });
}

// Export as various note formats
export function exportAsMarkdown(item: MailItem): void {
  const noteData = createNoteContent(item);
  const markdown = `# ${noteData.title}

## Summary
${item.summary}

## Document Details
- **Category**: ${item.category.charAt(0).toUpperCase() + item.category.slice(1)}
- **Upload Date**: ${new Date(item.uploadDate).toLocaleDateString()}
${item.reminderDate ? `- **Reminder**: ${new Date(item.reminderDate).toLocaleDateString()}` : ''}

${item.extractedText ? `## Extracted Text
\`\`\`
${item.extractedText}
\`\`\`
` : ''}

---
*Generated by Posty Mail Manager*`;

  downloadAsTextFile({ 
    title: noteData.title, 
    content: markdown 
  }, `${item.title.replace(/[^a-zA-Z0-9]/g, '_')}.md`);
}

export function exportAsPlainText(item: MailItem): void {
  const noteData = createNoteContent(item);
  downloadAsTextFile(noteData, `${item.title.replace(/[^a-zA-Z0-9]/g, '_')}.txt`);
}

export function exportAsJSON(item: MailItem): void {
  const exportData = {
    ...item,
    exportDate: new Date().toISOString(),
    source: 'Posty Mail Manager'
  };
  
  const jsonContent = JSON.stringify(exportData, null, 2);
  const blob = new Blob([jsonContent], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = `${item.title.replace(/[^a-zA-Z0-9]/g, '_')}.json`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  URL.revokeObjectURL(url);
}

// Helper function to download text content
function downloadAsTextFile(noteData: Pick<NoteData, 'title' | 'content'>, filename: string): void {
  const blob = new Blob([noteData.content], { type: 'text/plain;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  URL.revokeObjectURL(url);
}

// Import functionality for JSON files
export function importFromJSON(file: File): Promise<Partial<MailItem>> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    
    reader.onload = (e) => {
      try {
        const content = e.target?.result as string;
        const data = JSON.parse(content);
        
        // Validate that it's a valid mail item export
        if (data.title && data.summary && data.category) {
          resolve({
            title: data.title,
            summary: data.summary,
            category: data.category,
            reminderDate: data.reminderDate,
            extractedText: data.extractedText
          });
        } else {
          reject(new Error('Invalid mail item JSON format'));
        }
      } catch (error) {
        reject(new Error('Failed to parse JSON file'));
      }
    };
    
    reader.onerror = () => reject(new Error('Failed to read file'));
    reader.readAsText(file);
  });
}

// Bulk export functionality
export function exportAllAsZip(items: MailItem[]): void {
  // For now, we'll create individual files
  // In a full implementation, you'd use a library like JSZip
  items.forEach((item, index) => {
    setTimeout(() => {
      exportAsMarkdown(item);
    }, index * 100); // Stagger downloads
  });
}